#
# Copyright (c) 2017-2020,2023 Gaël PORTAY
#
# SPDX-License-Identifier: MIT
#

#
# Copyright (c) 2013-2023 Docker, Inc.
#               2017,2023 Gaël PORTAY
#
# SPDX-License-Identifier: Apache-2.0
#
__docker_q() {
	docker ${host:+--host "$host"} ${config:+--config "$config"} ${context:+--context "$context"} 2>/dev/null "$@"
}

# __docker_containers returns a list of containers. Additional options to
# `docker ps` may be specified in order to filter the list, e.g.
# `__docker_containers --filter status=running`
# By default, only names are returned.
# Set DOCKER_COMPLETION_SHOW_CONTAINER_IDS=yes to also complete IDs.
# An optional first option `--id|--name` may be used to limit the
# output to the IDs or names of matching items. This setting takes
# precedence over the environment setting.
__docker_containers() {
	local format
	if [ "${1-}" = "--id" ] ; then
		format='{{.ID}}'
		shift
	elif [ "${1-}" = "--name" ] ; then
		format='{{.Names}}'
		shift
	elif [ "${DOCKER_COMPLETION_SHOW_CONTAINER_IDS-}" = yes ] ; then
		format='{{.ID}} {{.Names}}'
	else
		format='{{.Names}}'
	fi
	__docker_q ps --format "$format" "$@"
}

# __docker_complete_containers applies completion of containers based on the current
# value of `$cur` or the value of the optional first option `--cur`, if given.
# Additional filters may be appended, see `__docker_containers`.
__docker_complete_containers() {
	local current="$cur"
	if [ "${1-}" = "--cur" ] ; then
		current="$2"
		shift 2
	fi
	COMPREPLY=( $(compgen -W "$(__docker_containers "$@")" -- "$current") )
}


__docker_complete_containers_running() {
	__docker_complete_containers "$@" --filter status=running
}

_docker_shell() {
	_dosh
}

#
#   Copyright © 2006-2008, Ian Macdonald <ian@caliban.org>
#             © 2009-2016, Bash Completion Maintainers
#                    2017, Gaël PORTAY
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
_dosh()
{
	local cur prev words cword
	_init_completion || return

	local shoptname="allexport errexit ignoreeof monitor noclobber noglob noexec nolog notify nounset verbose vi xtrace"
	local bashoptname="autocd cdable_vars cdspell checkhash checkjobs checkwinsize cmdhist compat31 compat32 compat40 compat41 compat42 compat43 complete_fullquote direxpand dirspell dotglob execfail expand_aliases extdebug extglob extquote failglob force_fignore globasciiranges globstar gnu_errfmt histappend histreedit histverify hostcomplete huponexit inherit_errexit interactive_comments lastpipe lithist login_shell mailwarn no_empty_cmd_completion nocaseglob nocasematch nullglob progcomp promptvars restricted_shell shift_verbose sourcepath xpg_echo"

	case $prev in
	[-+]o)
		COMPREPLY=( $( compgen -W "$shoptname" -- "$cur" ) )
		return
		;;
	[-+]O)
		COMPREPLY=( $( compgen -W "$bashoptname" -- "$cur" ) )
		return
		;;
	-c)
		COMPREPLY=( $(compgen -c "$cur") )
		return
		;;
	--shell)
		if [[ $COMPLETION_NODOSH ]]; then
			_filedir
			return
		fi

		local shells dockerfile directory
		dockerfile=Dockerfile
		directory=.
		# before we scan for shells, see if a path to dockerfile was
		# specified with --dockerfile and if the directory is to be
		# changed with --directory
		for (( i=0; i < ${#words[@]}; i++ )); do
			if [[ ${words[i]} == --dockerfile ]]; then
				# eval for tilde expansion
				eval dockerfile=( "${words[i+1]}" )
			elif [[ ${words[i]} == --directory ]]; then
				# eval for tilde expansion
				eval directory=( "${words[i+1]}" )
			fi
		done

		shells="$(DOSH_NOBUILD=1 dosh --directory "$directory" --dockerfile "$dockerfile" --shell /bin/sh -c 'grep -v \# /etc/shells' 2>/dev/null)"
		COMPREPLY=( $( compgen -W "$shells" -- "$cur" ) )
		return
		;;
	--mount-options)
		COMPREPLY=( $( compgen -W "rw ro z Z shared slage private delegated cached consistent nocopy" -- "$cur" ) )
		return
		;;
	--dockerfile)
		_filedir
		return
		;;
	--context)
		_filedir
		return
		;;
	--directory)
		_filedir -d
		return
		;;
	--exec|--attach)
		__docker_complete_containers_running
		return
		;;
	esac

	local shopts="-a -b -e -f -h -m -n -u -v -x -C"
	local short_opts="-c -s -i -o"
	local long_opts="--dockerfile --context --no-auto-context --no-extra-options --no-doshprofile --no-doshrc --directory --root --dind --home --mount-options --shell --ls --gc --build --rebuild --rmi --detach --exec --attach --tag --dry-run --verbose --version --help"
	local shell="${DOSHELL:-/bin/sh}"
	for (( i=0; i < ${#words[@]}; i++ )); do
		if [[ ${words[i]} == --shell ]]; then
			# eval for tilde expansion
			eval shell="${words[i+1]}"
		fi
	done
	case "${shell##*/}" in
	bash)
		shopts+=" -O -k -l -p -r -t -B -D -E -H -I -P -T"
		;;
	dash)
		shopts+=" -p -q -E -I -V"
		;;
	zsh)
		shopts+=" -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -d -g -k -l -p -r -t -w -y -B -D -E -F -G -H -I -J -K -L -M -N -O -P -Q -R -S -T -U -V -W -X -Y -Z"
		;;
	esac

	if [[ "$cur" == -* ]]; then
		COMPREPLY=( $( compgen -W "$short_opts $long_opts $shopts" -- "$cur" ) )
		return
	elif [[ "$cur" == +* ]]; then
		COMPREPLY=( $( compgen -W "${shopts//-/+}" -- "$cur" ) )
		return
	fi

        # before we check for arguments, see if a command was specified with -c
        for (( i=0; i < ${#words[@]}; i++ )); do
		if [[ ${words[i]} == -c ]]; then
			# do not complete
			return
		fi
        done

	local args ext=
	_count_args
	[[ $args -eq 1 ]] && ext=dosh
	_filedir $ext
} &&
complete -F _dosh dosh posh zdosh
