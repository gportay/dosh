#!/bin/bash
#
# Copyright 2024-2025 Gaël PORTAY
#
# SPDX-License-Identifier: LGPL-2.1-or-later
#

set -e

VERSION="6"

usage() {
	cat <<EOF
Usage: ${0##*/} [OPTIONS] [COMMAND] [COMMAND_OPTIONS] [COMMAND_ARGUMENTS]

A tool to wrap commands in controlled Docker containers using dosh.

Options:
      -f FILE                   Use file as config file (default .cqfdrc).
      -d DIR                    Use directory as cqfd directory (default .cqfd).
      -C DIR                    Use the specified working directory.
      -b STRING                 Target a specific build flavor.
      -q                        Turn on quiet mode.
      -v or --version           Show version.
      -h or --help              Show this help text.

Commands:
      init                      Initialize project build container.
      exec cmd [args]           Run argument(s) inside build container.
      flavors                   List flavors from config file to stdout.
      run [command_string]      Run argument(s) inside build container.
      release [command_string]  Run argument(s) and release software.
      shell [sh_arguments]      Run shell command inside build container.
      help                      Show this help text.

      By default, the 'run' command is assumed, with the default
      command string configured in your .cqfdrc (see build.command).

Command options for run:
      -c <command_arguments>    Append command arguments to the default command
                                string.
EOF
}

opt_f=".cqfdrc"
opt_d=".cqfd"
tar_transform="no"
while [ "$#" -ne 0 ]
do
	if [[ "$1" =~ ^(-h|--help)$ ]]
	then
		usage
		exit
	elif [[ "$1" =~ ^(-v|--version)$ ]]
	then
		echo "$VERSION"
		exit
	elif [[ "$1" =~ ^-q$ ]]
	then
		eval "opt_${1:1}=1"
	elif [[ "$1" =~ ^-(f|d|C|b)$ ]]
	then
		eval "opt_${1:1}=\"$2\""
                shift
	elif [[ "$1" =~ ^- ]]
	then
		echo "Error: $1: Invalid option" >&2
		exit 1
	elif [[ "$1" =~ ^(init|exec|flavors|run|release|shell|help)$ ]]
	then
		eval "cmd_$1=1"
		shift
		break
	elif [[ "$1" =~ ^(sh|ash|dash|bash|ksh|zsh|csh|tcsh|fish)$ ]]
	then
		eval "cmd_shell=1"
		CQFD_SHELL="$1"
		shift
		break
	else
		echo "Error: $1: Invalid command" >&2
		exit 1
	fi
	shift
done

if [[ "$cmd_help" ]]
then
	usage
	exit
fi

#
# Stolen and hacked from https://ajdiaz.wordpress.com/2008/02/09/bash-ini-parser/
#
# Copyright 2008,2010-2011 Andrés J. Díaz
#           2024-2025      Gaël PORTAY
#
# SPDX-License-Identifier: MIT
#
cfg_parser ()
{
	local ini

	mapfile -t ini <"$1"                                 # convert to line-array
	ini=("${ini[@]//[/\\[}")                             # escape [
	ini=("${ini[@]//]/\\]}")                             # escape ]
	ini=("${ini[@]//;*/}")                               # remove comments with ;
	ini=("${ini[@]/$'\t'=/=}")                           # remove tabs before =
	ini=("${ini[@]/=$'\t'/=}")                           # remove tabs after =
	ini=("${ini[@]/\ =/=}")                              # remove space before =
	ini=("${ini[@]/=\ /=}")                              # remove space after =
	ini=("${ini[@]/#\\[/$'\n}\nfunction cfg_section_'}") # convert section to function (1)
	ini=("${ini[@]/%\\]/ { :}")                          # convert section to function (2)
	ini+=("}")                                           # add the last brace
	ini[0]="${ini[0]/\}/}"                               # remove the first brace
	ini=("$(printf "%s\n" "${ini[@]}")")                 # reconvert to line-array
	eval "${ini[*]}"                                     # eval the result
}

if [[ "$opt_C" ]]
then
	cd "$opt_C"
fi

cfg_parser "$opt_f"

cfg_section_project
cfg_section_build
if [[ "$opt_b" ]]
then
	"cfg_section_$opt_b"
fi
dockerfile="${opt_d:-.cqfd}/${distro:-docker}/Dockerfile"

dosh_opts=(--dockerfile "$dockerfile")
dosh_opts+=(--no-doshrc --no-doshprofile)

# Array variables may not (yet) be exported.
mapfile -t vars < <(compgen -A arrayvar -X '!DOSH_*')
for var in "${vars[@]}"
do
	val=
	eval "val=\$$var"
	unset "$var"
	export "$var=$val"
done

if [[ "$cmd_flavors" ]]
then
	if [[ ! "$flavors" ]]
	then
		mapfile -t flavors < <(compgen -A function -X '!cfg_section_*')
		flavors=("${flavors[@]/cfg_section_/}")
		for i in "${!flavors[@]}"; do
			if [[ "${flavors[$i]}" =~ ^(build|project)$ ]]
			then
				unset 'flavors[$i]'
			fi
		done
	fi

	echo "${flavors[@]}"
	exit
fi

if [[ "$build_context" ]]
then
	echo "Warning: build_context=\"$build_context\": Unsupported option" >&2
fi

if [[ "$user_extra_groups" ]]
then
	echo "Warning: user_extra_groups=\"$user_extra_groups\": Unsupported option" >&2
fi

if [[ "$custom_img_name" ]]
then
	echo "Warning: custom_img_name=\"$custom_img_name\": Unsupported option" >&2
fi

if [[ "$CQFD_DOCKER" ]]
then
	DOSH_DOCKER="$CQFD_DOCKER"
fi
export DOSH_DOCKER

if [[ "$cmd_init" ]]
then
	DOSH_DOCKER_BUILD_EXTRA_OPTS="$CQFD_EXTRA_BUILD_ARGS"
	export DOSH_DOCKER_BUILD_EXTRA_OPTS

	if [[ "$docker_build_args" ]]
	then
		DOSH_DOCKER_BUILD_EXTRA_OPTS+=" $docker_build_args"
	fi

	exec "${DOSH[@]:-dosh}" --rebuild "${dosh_opts[@]}" </dev/null
fi

if [[ "$cmd_exec" ]] && [[ "$#" -eq 0 ]]
then
	usage
	echo "Error: exec: Too few arguments" >&2
	exit 1
elif [[ "$cmd_exec" ]]
then
	command="${*@Q}"
elif [[ "$cmd_run" ]] && [[ "$1" = -c ]] && [[ "$#" -eq 1 ]]
then
	usage
	echo "Error: run -c: Too few arguments" >&2
	exit 1
elif [[ "$cmd_run" ]] && [[ "$1" = -c ]]
then
	shift
	command="$command $*"
elif [[ "$cmd_run" ]] || [[ "$cmd_release" ]] && [[ "$#" -ne 0 ]]
then
	command="$*"
elif [[ "$cmd_shell" ]] && [[ "$#" -ne 0 ]]
then
	command="${CQFD_SHELL:-/bin/sh} ${*@Q}"
elif [[ "$cmd_shell" ]]
then
	command="${CQFD_SHELL:-/bin/sh}"
fi

DOSH_DOCKER_RUN_EXTRA_OPTS="--log-driver=none -ti"
if [[ ! "$CQFD_NO_SSH_CONFIG" ]]
then
	DOSH_DOCKER_RUN_EXTRA_OPTS+=" -v ${HOME// /\ }/.ssh:${HOME// /\ }/.ssh"
	DOSH_DOCKER_RUN_EXTRA_OPTS+=" -v /etc/ssh:/etc/ssh"

fi
if [[ "$SSH_AUTH_SOCK" ]]
then
	DOSH_DOCKER_RUN_EXTRA_OPTS+=" -v ${SSH_AUTH_SOCK// /\ }:${HOME// /\ }/.sockets/ssh"
	DOSH_DOCKER_RUN_EXTRA_OPTS+=" -e SSH_AUTH_SOCK=${HOME// /\ }/.sockets/ssh"
fi
if [[ "$docker_run_args" ]]
then
	DOSH_DOCKER_RUN_EXTRA_OPTS+=" $docker_run_args"
fi
if [[ "$CQFD_EXTRA_RUN_ARGS" ]]
then
	DOSH_DOCKER_RUN_EXTRA_OPTS+=" $CQFD_EXTRA_RUN_ARGS"
fi
export DOSH_DOCKER_RUN_EXTRA_OPTS

if [[ "$CQFD_DOCKER_GID" ]]
then
	: # Warning: CQFD_DOCKER_GID=\"$CQFD_DOCKER_GID\": Ignored environment
fi

if [[ "$CQFD_BIND_DOCKER_SOCK" ]]
then
	dosh_opts+=(--dind)
fi

"${DOSH[@]:-dosh}" "${dosh_opts[@]}" -c "$command"

if [ "$cmd_release" ]
then
	tar_opts=()

	if [[ ! "$archive" ]]
	then
		echo "Error: archive=\"$archive\": Invalid option" >&2
		exit 1
	fi

	archive="${archive:-%Po-%Pn.tar.xz}"
	archive="${archive//%Gh/$(git rev-parse --short HEAD 2>/dev/null || echo unset)}"
	archive="${archive//%GH/$(git rev-parse HEAD 2>/dev/null || echo unset)}"
	archive="${archive//%D3/$(date "+%Y-%m-%d")}"
	archive="${archive//%Du/$(date +%s >/dev/null)}"
	archive="${archive//%Po/${org:-cqfd}}"
	archive="${archive//%Pn/${name:-dosh}}"
	archive="${archive//%Cf/${opt_b:-build}}"

	if [[ ! "$files" ]]
	then
		echo "Error: files=\"$files\": Invalid option" >&2
		exit 1
	fi

	# shellcheck disable=SC2162
	read -a files <<<"$files"
	if [[ "${#files[@]}" -eq 0 ]]
	then
		echo "Error: files=${files[*]}: Invalid option" >&2
		exit 1
	fi

	if [[ "$tar_transform" = yes ]]
	then
		tar_opts+=("--transform" "s/.*\///g")
	fi

	if [[ "$tar_options" ]]
	then
		# shellcheck disable=SC2162
		read -a _array <<<"$tar_options"
		tar_opts+=("${_array[@]}")
	fi

	case "$archive" in
	*.tar.xz)
		if [[ ! "$XZ_OPT" ]]
		then
			XZ_OPT=-9
		fi
		export XZ_OPT

		exec tar -cJf "$archive" "${tar_opts[@]}" "${files[@]}"
		;;
	*.tar.gz)
		exec tar -czf "$archive" "${tar_opts[@]}" "${files[@]}"
		;;
	*.zip)
		exec zip -q -9 -r "$archive" "${files[@]}"
		;;
	*)
		echo "Error: archive=\"$archive\": Invalid option" >&2
		exit 1
		;;
	esac

	exit 127
fi
